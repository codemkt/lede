# 
# <https://github.com/KFERMercer/OpenWrt-CI>
#
# Copyright (C) 2019 P3TERX
#
# Copyright (C) 2020 KFERMercer
#
name: OpenWrt-CI

on:
  schedule:
    - cron: 0 20 * * *
  workflow_dispatch:
    inputs:
      device:
        description: '选择要编译的设备'
        required: true
        default: 'x86_64'
        type: choice
        options:
          - x86_64
          - mediatek-linkit-smart-7688
          - mt7628an-gl-mt300n-v2
          - mt7628an-hiwifi-hc5611
          - mt7628an-hiwifi-hc5861b  
          - mt7628an-hiwifi-hc5761a
          - mt7628an-hiwifi-hc5661a
          - mt7628an-cudy-wr1000
          - d-team-pbr-d1
          - mt7628an-elecom-wrc-1167fs
          - mt7628an-buffalo-wcr-1166ds
          - alfa-network-awusfree1
      build_config:
        description: '编译配置'
        required: false
        default: 'lean'
        type: choice
        options:
          - lean
          - minimal
          - full

permissions:
  contents: read

jobs:

  build_openwrt:

    name: Build OpenWrt Firmware

    runs-on: ubuntu-22.04

    steps:
      - name: Space cleanup and Initialization environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker rmi `docker images -q`
          sudo -E rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d /usr/local/lib/android
          sudo -E apt-mark hold grub-efi-amd64-signed
          sudo -E apt update
          sudo -E apt -y purge azure-cli* docker* ghc* zulu* llvm* firefox google* dotnet* powershell* openjdk* mysql* php* mongodb* dotnet* snap*
          sudo -E apt -y full-upgrade
          sudo -E apt -y install ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache clang cmake cpio curl device-tree-compiler flex gawk gcc-multilib g++-multilib gettext genisoimage git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev libreadline-dev libssl-dev libtool llvm lrzsz msmtp ninja-build p7zip p7zip-full patch pkgconf python3 python3-pyelftools python3-setuptools qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
          sudo -E systemctl daemon-reload
          sudo -E apt -y autoremove --purge
          sudo -E apt clean
          sudo -E timedatectl set-timezone "Asia/Shanghai"

      - name: Checkout OpenWrt
        uses: actions/checkout@v4

      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        with:
          # this might remove tools that are actually needed,
          # if set to "true" but frees about 6 GB
          tool-cache: true
          # all of these default to true, but feel free to set to
          # "false" if necessary for your workflow
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          swap-storage: true

      - name: Update feeds
        run: |
          sed -i 's/#src-git helloworld/src-git helloworld/g' ./feeds.conf.default
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: Generate configuration file
        run: |
          # 根据选择的设备生成对应的配置
          DEVICE="${{ github.event.inputs.device || 'x86_64' }}"
          BUILD_CONFIG="${{ github.event.inputs.build_config || 'lean' }}"
          
          echo "选择的设备: $DEVICE"
          echo "编译配置: $BUILD_CONFIG"
          
          # 生成基础配置
          if [[ "$DEVICE" == "x86_64" ]]; then
            # X86_64配置
            cat > .config << EOF
          CONFIG_TARGET_x86=y
          CONFIG_TARGET_x86_64=y
          CONFIG_TARGET_x86_64_DEVICE_generic=y
          EOF
          else
            # MT7628设备配置
            cat > .config << EOF
          CONFIG_TARGET_ramips=y
          CONFIG_TARGET_ramips_mt76x8=y
          CONFIG_TARGET_ramips_mt76x8_DEVICE_$(echo $DEVICE | sed 's/-/_/g')=y
          EOF
          fi
          
          # 添加通用配置
          cat >> .config << EOF
          CONFIG_DEVEL=y
          CONFIG_TOOLCHAINOPTS=y
          CONFIG_BUSYBOX_CUSTOM=y
          # 文件系统配置
          CONFIG_TARGET_ROOTFS_SQUASHFS=y
          CONFIG_TARGET_SQUASHFS_BLOCK_SIZE=64
          # 禁用initramfs（除非特别需要）
          # CONFIG_TARGET_ROOTFS_INITRAMFS is not set
          # 启用sysupgrade镜像
          CONFIG_TARGET_IMAGES_GZIP=y
          CONFIG_BUSYBOX_CONFIG_FEATURE_EDITING_SAVEHISTORY=y
          CONFIG_BUSYBOX_CONFIG_FEATURE_EDITING_VI=y
          CONFIG_BUSYBOX_CONFIG_FEATURE_LESS_FLAGS=y
          CONFIG_BUSYBOX_CONFIG_FEATURE_LESS_REGEXP=y
          CONFIG_BUSYBOX_CONFIG_FEATURE_LESS_WINCH=y
          CONFIG_KERNEL_BUILD_USER="OpenWrt-CI"
          CONFIG_KERNEL_BUILD_DOMAIN="Azure"
          CONFIG_CCACHE=y
          CONFIG_PACKAGE_luci=y
          CONFIG_LUCI_LANG_zh_Hans=y
          CONFIG_PACKAGE_luci-theme-bootstrap=y
          CONFIG_PACKAGE_curl=y
          CONFIG_PACKAGE_htop=y
          CONFIG_PACKAGE_nano=y
          CONFIG_PACKAGE_tree=y
          CONFIG_PACKAGE_vim-fuller=y
          CONFIG_PACKAGE_wget-ssl=y
          CONFIG_PACKAGE_kmod-tun=y
          CONFIG_PACKAGE_luci-app-upnp=y
          CONFIG_PACKAGE_luci-app-wol=y
          CONFIG_PACKAGE_luci-app-ramfree=y
          CONFIG_PACKAGE_luci-app-filetransfer=y
          CONFIG_PACKAGE_luci-app-autoreboot=y
          CONFIG_PACKAGE_luci-app-ssr-plus=y
          EOF
          
          # 针对不同配置添加特定软件包
          if [[ "$BUILD_CONFIG" == "full" ]]; then
            cat >> .config << EOF
          CONFIG_PACKAGE_luci-app-adbyby-plus=y
          CONFIG_PACKAGE_luci-app-aria2=y
          CONFIG_PACKAGE_luci-app-baidupcs-web=y
          CONFIG_PACKAGE_luci-app-docker=y
          CONFIG_PACKAGE_luci-app-frpc=y
          CONFIG_PACKAGE_luci-app-hd-idle=y
          CONFIG_PACKAGE_luci-app-kodexplorer=y
          CONFIG_PACKAGE_luci-app-minidlna=y
          CONFIG_PACKAGE_luci-app-openvpn-server=y
          CONFIG_PACKAGE_luci-app-qbittorrent=y
          CONFIG_PACKAGE_luci-app-ssr-plus=y
          CONFIG_PACKAGE_luci-app-ttyd=y
          CONFIG_PACKAGE_luci-app-v2ray-server=y
          CONFIG_PACKAGE_luci-app-verysync=y
          CONFIG_PACKAGE_luci-app-webadmin=y
          CONFIG_PACKAGE_luci-app-wireguard=y
          CONFIG_PACKAGE_luci-app-wrtbwmon=y
          EOF
          elif [[ "$BUILD_CONFIG" == "minimal" ]]; then
            cat >> .config << EOF
          # 最小化配置，去掉一些可选软件包
          # CONFIG_PACKAGE_luci-app-ssr-plus is not set
          EOF
          fi
          
          # 针对MT7628设备添加特定配置
          if [[ "$DEVICE" != "x86_64" ]]; then
            cat >> .config << EOF
          CONFIG_PACKAGE_kmod-mt76x2=y
          CONFIG_PACKAGE_kmod-mt7628=y
          CONFIG_PACKAGE_wpad-basic=y
          CONFIG_PACKAGE_hostapd-common=y
          CONFIG_PACKAGE_wpa-supplicant=y
          # MT7628特定驱动
          CONFIG_PACKAGE_kmod-mt76x8=y
          CONFIG_PACKAGE_kmod-mt7603=y
          EOF
          
            # 根据设备存储大小进行不同配置
            if [[ "$DEVICE" == *"awusfree1"* ]]; then
              cat >> .config << EOF
          # 小存储设备配置(8MB) - AWUSFREE1
          CONFIG_TARGET_ROOTFS_SQUASHFS=y
          CONFIG_TARGET_SQUASHFS_BLOCK_SIZE=64
          CONFIG_TARGET_ROOTFS_PARTSIZE=6
          CONFIG_TARGET_KERNEL_PARTSIZE=2
          # 确保生成多种镜像格式
          CONFIG_TARGET_IMAGES_GZIP=y
          EOF
            elif [[ "$DEVICE" == *"linkit-smart-7688"* ]]; then
              cat >> .config << EOF
          # 大存储设备配置(32MB) - LinkIt Smart 7688
          CONFIG_TARGET_ROOTFS_PARTSIZE=28
          CONFIG_TARGET_KERNEL_PARTSIZE=4
          CONFIG_TARGET_IMAGES_PAD=y
          CONFIG_TARGET_IMAGES_GZIP=y
          # LinkIt Smart 7688 特定软件包
          CONFIG_PACKAGE_kmod-usb2=y
          CONFIG_PACKAGE_kmod-usb-ohci=y
          CONFIG_PACKAGE_kmod-sdhci-mt7620=y
          CONFIG_PACKAGE_uboot-envtools=y
          EOF
            elif [[ "$DEVICE" == *"pbr-d1"* ]] || [[ "$DEVICE" == *"cudy-wr1000"* ]] || [[ "$DEVICE" == *"hiwifi"* ]]; then
              cat >> .config << EOF
          # 中等存储设备配置(16MB) - PBR-D1, Cudy WR1000, HiWiFi等
          CONFIG_TARGET_ROOTFS_PARTSIZE=12
          CONFIG_TARGET_KERNEL_PARTSIZE=4
          CONFIG_TARGET_IMAGES_PAD=y
          CONFIG_TARGET_IMAGES_GZIP=y
          EOF
            else
              cat >> .config << EOF
          # 标准MT7628设备配置
          CONFIG_TARGET_ROOTFS_PARTSIZE=12
          CONFIG_TARGET_KERNEL_PARTSIZE=4
          CONFIG_TARGET_IMAGES_PAD=y
          CONFIG_TARGET_IMAGES_GZIP=y
          EOF
            fi
          fi
          
          make defconfig

      - name: Show configuration
        run: |
          echo "=== 当前编译配置 ==="
          echo "设备: ${{ github.event.inputs.device || 'x86_64 (定时任务)' }}"
          echo "配置: ${{ github.event.inputs.build_config || 'lean (定时任务)' }}"
          echo "=== 配置文件内容 ==="
          head -20 .config
          echo "..."
          echo "=== 目标设备信息 ==="
          grep "CONFIG_TARGET" .config | head -10

      - name: Download packages
        run: make download -j16

      - name: Compile firmware
        run: |
          make -j$(nproc) || make -j1 V=s
          echo "======================="
          echo "Space usage:"
          echo "======================="
          df -h
          echo "======================="
          du -h --max-depth=1 ./ --exclude=build_dir --exclude=bin
          du -h --max-depth=1 ./build_dir
          du -h --max-depth=1 ./bin

      - name: Check build results
        run: |
          echo "=================================="
          echo "📦 编译结果检查"
          echo "=================================="
          echo ""
          echo "🔍 查找生成的固件文件..."
          FIRMWARE_FILES=$(find ./bin/targets/ -name "*.bin" -o -name "*.img" -o -name "*.gz")
          if [ -n "$FIRMWARE_FILES" ]; then
            echo "✅ 找到固件文件:"
            echo "$FIRMWARE_FILES" | head -20
            echo ""
            echo "📏 固件文件大小:"
            find ./bin/targets/ -name "*.bin" -exec ls -lh {} \;
          else
            echo "❌ 未找到固件文件!"
          fi
          echo ""
          echo "🔍 检查sysupgrade文件..."
          SYSUPGRADE_FILES=$(find ./bin/targets/ -name "*sysupgrade*" 2>/dev/null || true)
          if [ -n "$SYSUPGRADE_FILES" ]; then
            echo "✅ 找到sysupgrade文件:"
            echo "$SYSUPGRADE_FILES"
          else
            echo "⚠️  未找到sysupgrade文件"
          fi
          echo ""
          echo "🔍 检查factory文件..."
          FACTORY_FILES=$(find ./bin/targets/ -name "*factory*" 2>/dev/null || true)
          if [ -n "$FACTORY_FILES" ]; then
            echo "✅ 找到factory文件:"
            echo "$FACTORY_FILES"
          else
            echo "⚠️  未找到factory文件"
          fi
          echo ""
          echo "🔍 检查initramfs文件..."
          INITRAMFS_FILES=$(find ./bin/targets/ -name "*initramfs*" 2>/dev/null || true)
          if [ -n "$INITRAMFS_FILES" ]; then
            echo "✅ 找到initramfs文件:"
            echo "$INITRAMFS_FILES"
          else
            echo "⚠️  未找到initramfs文件"
          fi
          echo ""
          echo "=================================="
          echo "📋 文件类型说明:"
          echo "• sysupgrade.bin - 用于已安装OpenWrt的设备升级"
          echo "• factory.bin - 用于从原厂固件刷入OpenWrt"
          echo "• initramfs.bin - 内存运行版本（临时使用）"
          echo "=================================="

      - name: Prepare artifact
        run: |
          mkdir -p ./artifact/package
          mkdir -p ./artifact/buildinfo
          rm -rf $(find ./bin/targets/ -type d -name "packages")
          cp -rf $(find ./bin/packages/ -type f -name "*.ipk") ./artifact/package/
          cp -rf $(find ./bin/targets/ -type f -name "*.buildinfo" -o -name "*.manifest") ./artifact/buildinfo/

      - name: Upload buildinfo
        uses: actions/upload-artifact@v4
        with:
          name: OpenWrt_buildinfo_${{ github.event.inputs.device || 'scheduled' }}_${{ github.event.inputs.build_config || 'lean' }}
          path: ./artifact/buildinfo/

      - name: Upload package
        uses: actions/upload-artifact@v4
        with:
          name: OpenWrt_package_${{ github.event.inputs.device || 'scheduled' }}_${{ github.event.inputs.build_config || 'lean' }}
          path: ./artifact/package/

      - name: Upload firmware
        uses: actions/upload-artifact@v4
        with:
          name: OpenWrt_firmware_${{ github.event.inputs.device || 'scheduled' }}_${{ github.event.inputs.build_config || 'lean' }}
          path: ./bin/targets/

      - name: Build Summary
        run: |
          echo "🎉 编译完成！"
          echo ""
          echo "📥 下载说明："
          echo "1. 在Actions页面找到3个文件："
          echo "   • OpenWrt_firmware_xxx.zip - 🔥 固件文件（这个是你需要的！）"
          echo "   • OpenWrt_package_xxx.zip - 📦 软件包文件"
          echo "   • OpenWrt_buildinfo_xxx.zip - 📋 编译信息"
          echo ""
          echo "2. 下载 OpenWrt_firmware_xxx.zip 并解压"
          echo "3. 使用其中的 .bin 文件刷入你的路由器"
          echo ""
          echo "🔧 刷机文件类型："
          if find ./bin/targets/ -name "*sysupgrade*" >/dev/null 2>&1; then
            echo "   ✅ sysupgrade.bin - 用于OpenWrt设备升级"
          fi
          if find ./bin/targets/ -name "*factory*" >/dev/null 2>&1; then
            echo "   ✅ factory.bin - 用于原厂固件刷入"
          fi
          if find ./bin/targets/ -name "*initramfs*" >/dev/null 2>&1; then
            echo "   ✅ initramfs.bin - 内存运行版本"
          fi
          echo ""
          echo "📱 设备信息："
          echo "   • 设备: ${{ github.event.inputs.device || 'x86_64 (定时任务)' }}"
          echo "   • 配置: ${{ github.event.inputs.build_config || 'lean (定时任务)' }}"
          echo "   • 编译时间: $(date '+%Y-%m-%d %H:%M:%S')"
